1. In your own words, explain what clean code is and why it is important. 

A: Clean code is important for many reasons. The biggest thing that I think of when it comes to clean code, is that it is READABLE for other developers. Someone else can pick and where you left off without having to ask a bunch of questions or sort through what you are trying to accomplish in the code. Clean code is also not redundant, and is as concise as it can be (DRY code). It's kind of like having an easy-to-understand file system, where any front desk receptionist can understand the organization method and all the labels that are used to contain everything. 

2. Toyota article

A: Blood glucose meters use computers in order to help read a person's blood sugar. People use these devices in order to manage their chronic disease, and make decisions based on those readings. If for some reason the code in the meter was so inaccurate that it didn't provide accurate readings, it would definitely lead to people making bad decisions about how to handle their blood sugars. For example, if it read that it was too low, then an individual might treat a "low" blood sugar for no reason. On the other hand, if a person has a high blood sugar, it might cause them to take too much insulin, or cause panic and go to an emergency room. 

3. Code: 
FUNCTION doSomething(x, y)               // Creating a new function
 IF y = "F" THEN               // Check if y is equal "F"
 SET z to (xâˆ’32) * (5/9)       // Formula to convert degrees fahrenheit to celsius
 PRINT z                       // Print result
 ELSE { THEN          // If y not equal to "F", check if equal to "C"
 SET z to x * 1.8000 + 32.00 }  // Formula to convert degrees celsius to fahrenheit
 PRINT z                       // Print result
 END IF
END FUNCTION


A: I've added some notes above to refactor the code. I think that the function name could use a noun, vs. just having it be called "do". The "do" name alone is not meaningful enough for someone to know what it's GOING to do. I think that this could also just be a simple IF ELSE, vs. having an "else if" at the end. I think what would also help is if the parameters passed through were better defined.

4. Code: 
FUNCTION calcPercent(sum, total)
 IF NOT(total = 0) THEN
     SET percentage to sum / total * 100
 ELSE
   PRINT "Sorry, cannot divide by 0"
 END IF

 PRINT percentage
END FUNCTION

A: Changes
	- I would call the function calculatePercent instead of the abbreviation. 
	- IF NOT (total=0) should just be IF (total = 0) as that isn't proper logic or syntax. 
	

5. Using pseudocode, refactor the code for the following examples. 
a. 
FUNCTION checkOutCustomer(subTotal, discountRate, paymentType)
   PRINT "Your total due is: " + subTotal * discountRate + (subTotal * tax)

   IF paymentType = 'CASH' THEN
       CALL getPayment RETURNING amount
       PRINT "Change due: " + amount - subTotal * discountRate + (subTotal * tax)
   ELSE paymentType = 'CREDIT CARD' THEN
       CALL getPayment RETURNING amount
       PRINT "Your credit card has been charged: " + subTotal * discountRate + (subTotal * tax)
   END IF
END FUNCTION
